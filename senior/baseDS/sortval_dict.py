# ^_^ coding: utf-8
# 2-4 如何根据字典中值的大小, 对字典中的项排序
"""
1、某班英语成绩以字典形式存储为：
{'LiLei': 79, 'Jim': 88, 'Lucy':92 ...}
根据成绩高低，计算学生排名
"""
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# 优先使用内置的sorted函数，原因：
#   算法最优
#   内置函数内部是以C的速度运行，速度更快
# * sorted默认是给列表进行排序的，他不会改变源数据
# * list自带的sort函数是改变源数据的，不返回数据
# 不过对字典排序的时候，他只按照字典的key来排序的
# 原因：sorted传入的为可迭代对象，字典的可迭代对象为键，值已经不存在了
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
from random import randint

# t1 = [9, 1, 2, 8, 5]
# print sorted(t1)
# print t1
# print t1.sort()
# print t1
t2 = {x: randint(60, 100) for x in 'xyzabcd'}

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# 解决方案：
# 1、利用zip将字典数据转化为元组
# 元组的大小比较，只比较第一个元素，所以把字典的每个元素转化为元组即可
# zip它接受一系列可迭代的对象作为参数，将对象中对应的元素打包成一个个tuple（元组）
# 然后返回由这些tuples组成的list，以最小参数个数为准
# 2、传递sorted函数中的key参数
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
print (97, 100) > (10, 120)

tz1 = zip(t2.itervalues(), t2.iterkeys())
print type(tz1)
print tz1

print sorted(tz1)

print sorted(t2.items(), key=lambda item: item[1])
